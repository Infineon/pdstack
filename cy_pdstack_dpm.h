/***************************************************************************//**
* \file cy_pdstack_dpm.h
* \version 2.0
*
* Header file of Device Policy Manager of the PDStack middleware.
*
********************************************************************************
* \copyright
* Copyright 2021-2022, Cypress Semiconductor Corporation. All rights reserved.
* You may use this file only in accordance with the license, terms, conditions,
* disclaimers, and limitations in the end user license agreement accompanying
* the software package with which this file was provided.
*******************************************************************************/

#if !defined(CY_PDSTACK_DPM_H)
#define CY_PDSTACK_DPM_H

#include "cy_pdstack_common.h"

/*******************************************************************************
*                              Type Definitions
*******************************************************************************/

/**
* \addtogroup group_pdstack_functions
* \{
*/

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Init
****************************************************************************//**
*
* This function initializes the device policy manager with callback pointers
* and loads the port configuration information from the port config table. This
* function also initializes the PD policy engine and Type-C connection manager.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrUsbPdContext
* UsbPd Driver Context pointer.
*
* \param ptrPortCfg
* Port Configuration pointer.
*
* \param ptrAppCbk
* Application callback function pointer.
*
* \param ptrDpmParams
* Pointer to the DPM parameter information structure.
*
* \param ptrTimerContext
* Pointer to soft timer context structure.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the input parameters are not valid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Init(
       /* Pointer to the pdstack context. Will be initialized as part of this function. */
       cy_stc_pdstack_context_t *ptrPdStackContext,
       /* This is required since the pdstack middleware will be making calls to the usbpd pdl. */
       cy_stc_usbpd_context_t *ptrUsbPdContext,
       /* Pointer to the port config structure - generated by the ez-pd configurator. */
       const cy_stc_pdstack_port_cfg_t *ptrPortCfg,
       /* Pointer to the application callbacks. */
       cy_stc_pdstack_app_cbk_t* ptrAppCbk,
       /* Pointer to the DPM Params. */
       const cy_stc_pdstack_dpm_params_t *ptrDpmParams,
       /* Pointer to soft timer context. */
       cy_stc_sw_timer_t *ptrTimerContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Start
****************************************************************************//**
*
* This function makes the specified USB Type-C port operational. The port to be
* updated is specified by passing the PD Stack context corresponding to it.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer is invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Start(
       cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Stop
****************************************************************************//**
*
* This function stops the port operation. The USBPD block corresponding to the
* port will be disabled.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer is invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Stop(
       cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Disable
****************************************************************************//**
*
* This function disables the PD port operation and limits it to receiving hard
* reset signalling.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer is invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Disable(
       cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_PrepareDeepSleep
****************************************************************************//**
*
* This function configures the PD policy manager and Type-C manager state machines
* to allow the PMG1 device to be placed in deep sleep. If the state machines are
* not in a busy state, the USBPD block is configured to trigger a wake-up interrupt
* on any activity and the location pointed by ptrDeepSleep is set to true.
* If the state machines are busy, the location pointed by ptrDeepSleep is set to
* false to indicate that the PMG1 device shall not proceed into deep sleep.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrDeepSleep
* Output parameter contains true if deepsleep is possible and configured,
* otherwise false
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer or the ptrDeepSleep is
* invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_PrepareDeepSleep(
       cy_stc_pdstack_context_t *ptrPdStackContext,
       bool *ptrDeepSleep);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Resume
****************************************************************************//**
*
* This function resumes the Type-C manager and PD policy engine state machines
* after the PMG1 device has woken up from deep sleep. This function needs to be
* called to resume the stack operation if Cy_PdStack_Dpm_PrepareDeepSleep has
* previously been called and returned true. This needs to be done even if the PMG1
* device did not actually go into deep sleep due to other reasons.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrResume
* Output parameter contains true if successful otherwise false
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer or the ptrResume is
* invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Resume(
       cy_stc_pdstack_context_t *ptrPdStackContext,
       bool *ptrResume);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_IsSleepAllowed
****************************************************************************//**
*
* This function checks if the PD policy engine and Type-C manager state machines
* corresponding to the specified Type-C port are idle. If this function indicates
* that the state machines are busy, deep sleep entry using the
* Cy_PdStack_Dpm_PrepareDeepSleep should not be attempted.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrSleepAllowed
* Output parameter contains true if possible to go into sleep mode, otherwise
* false
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer or the ptrSleepAllowed is
* invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_IsSleepAllowed(
       cy_stc_pdstack_context_t *ptrPdStackContext,
       bool *ptrSleepAllowed);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Rtos_Init
****************************************************************************//**
*
* This function initializes the device policy manager with RTOS context details.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrRtosContext
* Pointer to RTOS API's callback context
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the input parameters are not valid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Rtos_Init(
       cy_stc_pdstack_context_t *ptrPdStackContext,
       cy_stc_pdstack_rtos_context_t *ptrRtosContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_AltModeInitContext
****************************************************************************//**
*
* This function initializes the pdstack context with the Alternate Mode Layer
* context details.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrAltModeContext
* Pointer to the alternate mode context context
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the input parameters are not valid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_AltModeInitContext (
       cy_stc_pdstack_context_t *ptrPdStackContext,
       void *ptrAltModeContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_HpiInitContext
****************************************************************************//**
*
* This function initializes the pdstack context with the HPI context details.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrHpiContext
* Pointer to the HPI context
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the input parameters are not valid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_HpiInitContext (
       cy_stc_pdstack_context_t *ptrPdStackContext,
       void *ptrHpiContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Task
****************************************************************************//**
*
* This function runs the Type-C manager and PD policy manager tasks for the
* specified port.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer is invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Task(
       cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SendPdCommand
****************************************************************************//**
*
* This function provides an interface for the application module to send PD commands.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param cmd
* Type of command to be initiated.
*
* \param ptrCmdBuf
* Pointer to the command buffer.
*
* \param isResp
* Set to true when the API is called to send a response to previously received PD messages.
*
* \param cmdCbk
* Pointer to the callback function.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if the command is registered
* CY_PDSTACK_STAT_CMD_FAILURE if the PD port is not ready for a command
* CY_PDSTACK_STAT_BUSY if there is another pending command.
* CY_PDSTACK_STAT_BAD_PARAM if any of the parameters are invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SendPdCommand(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_en_pdstack_dpm_pd_cmd_t cmd,
        cy_stc_pdstack_dpm_pd_cmd_buf_t* ptrCmdBuf,
        bool isResp,
        cy_pdstack_dpm_pd_cmd_cbk_t cmdCbk);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SendPdCommandEc
****************************************************************************//**
*
* This function provides an interface for the HPI module to
* send PD commands. This is only meant for HPI module wherein responses come from EC.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param cmd
* Type of command to be initiated.
*
* \param ptrCmdBuf
* Pointer to the command buffer.
*
* \param cmdCbk
* Pointer to the callback function.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if the command is registered
* CY_PDSTACK_STAT_CMD_FAILURE if the PD port is not ready for a command
* CY_PDSTACK_STAT_BUSY if there is another pending command.
* CY_PDSTACK_STAT_BAD_PARAM if any of the parameters are invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_Pdstack_Dpm_SendPdCommandEc(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_en_pdstack_dpm_pd_cmd_t cmd,
        cy_stc_pdstack_dpm_pd_cmd_buf_t* ptrCmdBuf,
        cy_pdstack_dpm_pd_cmd_cbk_t cmdCbk);
/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SendTypecCommand
****************************************************************************//**
*
* This function provides an interface for the application module to send commands
* to the Type-C connection manager.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param cmd
* Type of command to be performed.
*
* \param cmdCbk
* Pointer to the callback function.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if the command is registered
* CY_PDSTACK_STAT_CMD_FAILURE if the PD port is not ready for a command
* CY_PDSTACK_STAT_BUSY if there is another pending command.
* CY_PDSTACK_STAT_BAD_PARAM if any of the parameters are invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SendTypecCommand(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_en_pdstack_dpm_typec_cmd_t cmd,
        cy_pdstack_dpm_typec_cmd_cbk_t cmdCbk);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ProtReset
****************************************************************************//**
*
* This function resets PD protocol layer (transmit and receive) message ID counters
* for the specified PD packet type. The message ID will be set to zero on the next
* PD message transmitted by PMG1. Message ID checks will not be performed for the
* next PD message of this type which is received by PMG1.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param sop
* Packet type (SOP, SOP' or SOP'')
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context parameter is or sop value is invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ProtReset(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_en_pd_sop_t sop);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ProtResetRx
****************************************************************************//**
*
* This function resets the PD receive message counter for the specified packet type.
* This will cause the stack to skip checking for valid message ID on the next PD
* message of this type which is received.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param sop
* Packet type (SOP, SOP' or SOP'')
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context parameter or sop value is invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ProtResetRx(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_en_pd_sop_t sop);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_PeStop
****************************************************************************//**
*
* This function stops the policy engine. Used in a fault scenario where-in the USBPD
* communication needs to be stopped, but the Type-C manager needs to be active in
* order to detect detach of the faulty device.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context parameter is invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_PeStop(
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Pd3SrcRpFlowControl
****************************************************************************//**
*
* This function is used to specify whether we should keep the Rp termination at
* SinkTxNG or SinkTxOK while acting as a PD 3.0 source. The PD policy engine
* has a default source implementation where it changes the Rp to SinkTxNG before
* sending any PD messages and reverts the Rp to SinkTxOK at the end of the AMS.
* This function can be used to speed up operation when initiating back-to-back
* AMS-es by preventing the Rp from being changed back to SinkTxOK after each
* AMS.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param blockSinkAms
* If true, Rp will be changed to SinkTxNG; if false, Rp will be changed to SinkTxOK.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if DUT is a PD 3.0 source
* CY_PDSTACK_STAT_CMD_FAILURE if DUT is not a PD 3.0 source.
* CY_PDSTACK_STAT_BAD_PARAM if the context parameter is invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Pd3SrcRpFlowControl(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool blockSinkAms);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_IsIdle
****************************************************************************//**
*
* Function to check whether the Type-C/PD stack is idle.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrIsIdle
* Output parameter contains true if idle, false if any operations are pending
* on any port.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_IsIdle(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool *ptrIsIdle);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ClearSolnBusy
****************************************************************************//**
*
* Function to inform the Type-C/PD stack that the solution state
* allows Type-C transitions.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ClearSolnBusy(
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ClearSolnBusy
****************************************************************************//**
*
* Function to inform the Type-C/PD stack that the solution state does not
* allow Type-C transitions.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SetSolnBusy(
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SetCf
****************************************************************************//**
*
* Function sets/clears current foldback status.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param status
* Current foldback status
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SetCf (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool status);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_PpsTask
****************************************************************************//**
*
* This function monitors the PPS activity. This function needs to be called
* periodically when in PPS mode of operation. Since the VBUS voltage is expected
* to have stabilized when invoking this function, this is not handled internally
* and is expected to be triggered from the application layer. The recommended
* periodicity for this is 100ms.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_PpsTask (
        cy_stc_pdstack_context_t *ptrPdStackContext);
/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_IsRdoValid
****************************************************************************//**
*
* Generic function to evaluate any RDO with respect to current source cap of the specified context.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param rdo
* Request Data Object
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_FAILURE if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_IsRdoValid (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_pd_pd_do_t rdo);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateDisCounter
****************************************************************************//**
*
* This function clears DPM disable requests counter.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param clear
* True if port disable request counter needs to be cleared
* False if port disable request counter needs to be incremented
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_FAILURE if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateDisCounter (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool clear);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateUsbComm
****************************************************************************//**
*
* Function to update USB Communication Capable bit.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param state
* New value of the USB Communication Capable bit.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_FAILURE if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateUsbComm (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t state);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SetBCRFaultStat
****************************************************************************//**
*
* Function to set BCR Fault bit status.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param value
* Fault bit which needs to be set.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_FAILURE if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SetBCRFaultStat (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t value);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ClearBCRFaultStat
****************************************************************************//**
*
* Function to clear BCR Fault bit status.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param value
* Fault bit which needs to be cleared.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_FAILURE if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ClearBCRFaultStat (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t value);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_GetBistStmEn
****************************************************************************//**
*
* Function to get BIST STM enabled/disabled flag.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* True if BIST STM is enabled
* False if BIST STM is disabled
*
*******************************************************************************/
bool Cy_PdStack_Dpm_GetBistStmEn (
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SetBistStmEn
****************************************************************************//**
*
* Function to set BIST STM enabled/disabled flag.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param value
* Value to be set. Set true to enable and false to disable.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SetBistStmEn (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool value);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateExtSrcCap
****************************************************************************//**
*
* This function updates the extended source capabilities for the PD port.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrBuf
* Pointer to buffer containing extended source capabilities data.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateExtSrcCap (
        cy_stc_pdstack_context_t *ptrPdStackContext, 
        uint8_t *ptrBuf);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ClearFaultActive
****************************************************************************//**
*
* This function clears the internal fault active flags.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ClearFaultActive (
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_IsPrevContractValid
****************************************************************************//**
*
* This function checks if the previous contract is valid, Previous contract may
* become invalid due to runtime update of the source caps.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* \ref cy_en_pdstack_status_t
* CY_PDSTACK_STAT_SUCCESS if previous contract is valid.
* CY_PDSTACK_STAT_FAILURE if previous contract is invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_IsPrevContractValid (
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdatePortConfig
****************************************************************************//**
*
 * This function allows changing the PD port configuration parameters like port
 * role, default port role, DRP toggle enable and Try.Src enable at runtime.
 * These changes are only allowed while the corresponding PD port is disabled.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param role
* New port role selection (0 = Sink, 1 = Source, 2 = Dual Role).
*
* \param dflt_role
* New default port role selection (0 = Sink, 1 = Source).
*
* \param toggle_en
* New value for DRP toggle enable flag.
*
* \param try_src_snk_en
* New value for Try.SRC/ TRY.SNK enable flag (0 =
* Both Try.SRC and TRY.SNK are disabled, 1 = Try.SRC is enabled,
* 2 = TRY.SNK is enabled).
*
* \return
* \ref cy_en_pdstack_status_t
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
* CY_PDSTACK_STAT_FAILURE if port is not disabled.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdatePortConfig (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t role,
        uint8_t dflt_role,
        bool toggle_en,
        uint8_t try_src_snk_en);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateFrsEnable
****************************************************************************//**
*
* This functions allows to enable/disable the PD 3.0 FRS functionality.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param frsRxEn
* Whether FRS receive is to be enabled.
*
* \param frsTxEn
* Whether FRS transmit is to be enabled.
*
* \return
* \ref cy_en_pdstack_status_t
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
* CY_PDSTACK_STAT_FAILURE if port is not disabled.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateFrsEnable (
        cy_stc_pdstack_context_t *ptrPdStackContext, 
        bool frsRxEn, 
        bool frsTxEn);


/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ClearHardResetCount
****************************************************************************//**
*
* This functions clears the hard reset count.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ClearHardResetCount (
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_GetVbusVoltage
****************************************************************************//**
*
* This function uses the application provided callback to measure the current
* VBus voltage.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* VBus voltage in mV units.
*
*******************************************************************************/
uint16_t Cy_PdStack_Dpm_GetVbusVoltage (
         cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_GetCableUsbCap
****************************************************************************//**
*
* This function retrieves the type of USB signalling supported by the Type-C cable
* in use. The information is calculated based on the cable VDO responses obtained from
* the cable marker.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* USB data signalling supported by the cable marker if known, CY_PDSTACK_USB_SIG_UNKNOWN
* otherwise.
*
*******************************************************************************/
cy_en_pdstack_usb_data_sig_t Cy_PdStack_Dpm_GetCableUsbCap (
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SetDelaySrcCapStart
****************************************************************************//**
*
* This function facilitates to delay the starting of source cap on Type-C attach.
* Applicable only when cable is not present.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param delay
* Delay in ms.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SetDelaySrcCapStart (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint16_t delay);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SetAlert
****************************************************************************//**
*
* This function sets alert ADO on ocp/ovp fault. Stack will automatically
* send alert after explicit contract when alert ADO is non zero. Once alert is sent
* or detach happens; alert ADO will be cleared automatically by stack.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param alert_ado
* Alert augmented data object.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SetAlert (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_pd_pd_do_t alert_ado);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_DowngradePdRev
****************************************************************************//**
*
* This function allows to downgrade PD revision.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* \ref cy_en_pdstack_status_t
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_FAILURE if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_DowngradePdRev (
        cy_stc_pdstack_context_t *ptrPdStackContext);


/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateExtSnkCap
****************************************************************************//**
*
* This function allows to update the extended sink capabilities for the PD port
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrBuf
* Pointer to buffer containing extended sink capabilities data.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateExtSnkCap (
        cy_stc_pdstack_context_t *ptrPdStackContext, 
        uint8_t *ptrBuf);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SetFaultActive
****************************************************************************//**
*
* This function sets internal flags to indicate that any fault (OVP/OCP/OTP etc.) is active.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SetFaultActive (
        cy_stc_pdstack_context_t *ptrPdStackContext);


/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SetChunkXferRunning
****************************************************************************//**
*
* This function sets chunk transfer type. This should be called
* after response of a chunk is received to inform stack that chunked transfer
* has not been completed.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param amsType
* Type of PD atomic message sequence that is running.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SetChunkXferRunning (
        cy_stc_pdstack_context_t *ptrPdStackContext, 
        cy_en_pdstack_ams_type_t amsType);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SendHardReset
****************************************************************************//**
*
* This function attempts to send USBPD HardReset to port partner.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param reason
* Reason for the hard reset. Used for internal status tracking only.
*
* \return
* \ref cy_en_pdstack_status_t
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_FAILURE if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SendHardReset (
        cy_stc_pdstack_context_t *ptrPdStackContext, 
        uint8_t reason);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_GetPdPortStatus
****************************************************************************//**
*
* This function returns the PD port status as expected by the embedded controller.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* PD port status in the format expected by embedded controller.
*
*******************************************************************************/
uint32_t Cy_PdStack_Dpm_GetPdPortStatus(
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateSwapResponse
****************************************************************************//**
*
* This function updates the USBPD data role, power role and vconn swap responses.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param value
* New swap response
*
* \return
* \ref cy_en_pdstack_status_t
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_FAILURE if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateSwapResponse(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t value);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdatePortStatus
****************************************************************************//**
*
* This function updates the PD port status returned in response to a Get_Status command.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param status_p
* Pointer to buffer containing port status.
*
* \param offset
* Number of bytes of offset to be applied while updating the status
*
* \param byte_cnt
* Number of bytes of status to be updated.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdatePortStatus(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t *status_p, uint8_t offset, uint8_t byte_cnt);
        
/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_RefreshSrcCap
****************************************************************************//**
*
* This function refreshes the source cap at runtime.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* Returns true if the operation is successful otherwise false
*
*******************************************************************************/
bool Cy_PdStack_Dpm_RefreshSrcCap (
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_RefreshSnkCap
****************************************************************************//**
*
* This function refreshes the sink cap at runtime.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* Returns true if the operation is successful otherwise false
*
*******************************************************************************/
bool Cy_PdStack_Dpm_RefreshSnkCap (
        cy_stc_pdstack_context_t *ptrPdStackContext);
        
/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_GetStackConfig
****************************************************************************//**
*
* This function retrieves the configurable switch values at runtime.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* Structure indicating current stack configuration.
*
*******************************************************************************/
cy_pd_stack_conf_t Cy_PdStack_Dpm_GetStackConfig(
    cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ChangeEprActiveFlag
****************************************************************************//**
*
* Function to change state of EPR mode active flag.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param flag
* sets/resets EPR active flag.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ChangeEprActiveFlag(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool flag);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_IsEprModeActive
****************************************************************************//**
*
* Function to check whether EPR mode is active.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param isActive
* State of EPR flag
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_IsEprModeActive(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool *isActive);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ChangeEprToSpr
****************************************************************************//**
*
* Function changes the EPR to SPR indicator.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param flag
* sets/resets EPR flag to limit PDO index.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ChangeEprToSpr(
        cy_stc_pdstack_context_t *ptrPdStackContext, 
        bool flag);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_IsEprSpr
****************************************************************************//**
*
* Function checks whether the EPR pdo needs to limit it to SPR.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param isSpr
* Will contain true if eval pdo needs to limit pdo count to SPR otherwise false
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_IsEprSpr(
        cy_stc_pdstack_context_t *ptrPdStackContext, 
        bool *isSpr);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_IsEprAvsActive
****************************************************************************//**
*
* Function to check whether EPR AVS mode is active.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param isActive
* State of EPR flag
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_IsEprAvsModeActive(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool *isActive);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ChangeEprActiveFlag
****************************************************************************//**
*
* Function to change state of EPR AVS mode active flag.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param flag
* sets/resets EPR AVS active flag.
*
* \return
* cy_en_pdstack_status_t
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ChangeEprAvsActiveFlag(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool flag);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_IsValidAvsReq
****************************************************************************//**
*
* Function to change state of EPR AVS mode active flag.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param src_pdo_index
* SRC PDO index.
*
* \param rdo
* Request Data Object received from port partner.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_IsValidAvsReq(
        cy_stc_pdstack_context_t *ptrPdStackContext, 
        uint8_t src_pdo_index,
        cy_pd_pd_do_t rdo);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_EprSnkSendKeepAliveCb
****************************************************************************//**
*
* Function callback to initiate Keep Alive message.
*
* \param id
* Timer index
*
* \param ptrContext
* Callback context
*
* \return
* None
*
*******************************************************************************/
void Cy_PdStack_Dpm_EprSnkSendKeepAliveCb (
        cy_timer_id_t id,
        void *ptrContext);


/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateSnkMaxMin
****************************************************************************//**
*
* Function to update the sink max/min current/power at runtime thereby overriding
* the generated configuration by EZ-PD Configurator.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param count
* Number of PDOs
*
* \param max_min
* Pointer to max/min current/power array. 
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful.
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateSnkMaxMin (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t count,
        uint16_t* max_min);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateSnkCapMask 
****************************************************************************//**
*
* Function to update the sink PDO mask at runtime thereby overriding the 
* generated configuration by EZ-PD Configurator.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param mask
* PDO mask
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful.
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateSnkCapMask (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t mask);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateSnkCap 
****************************************************************************//**
*
* Function to update the sink PDOs at runtime thereby overriding the generated
* configuration by EZ-PD Configurator.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param count
* Number of PDOs
*
* \param pdo
* Pointer to the PDO array
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful.
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateSnkCap (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t count,
        cy_pd_pd_do_t* pdo);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateSrcCapMask 
****************************************************************************//**
*
* Function to update the source PDO mask at runtime thereby overriding the 
* generated configuration by EZ-PD Configurator.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param mask
* PDO Mask
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateSrcCapMask (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t mask);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateSrcCap 
****************************************************************************//**
*
* Function to update the source PDOs at runtime thereby overriding the generated
* configuration by EZ-PD Configurator.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param count
* Number of PDOs
*
* \param pdo
* Pointer to the PDO array
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateSrcCap (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t count,
        cy_pd_pd_do_t* pdo);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateEprSrcCap 
****************************************************************************//**
*
* Function to update the EPR source PDOs at runtime thereby overriding the generated
* configuration by EZ-PD Configurator.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param count
* Number of PDOs
*
* \param pdo
* Pointer to the PDO array
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateEprSrcCap (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t count,
        cy_pd_pd_do_t* pdo);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateEprSrcCapMask 
****************************************************************************//**
*
* Function to update the EPR source PDO mask at runtime thereby overriding the 
* generated configuration by EZ-PD Configurator.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param mask
* PDO Mask
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateEprSrcCapMask (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t mask);


/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateEprSnkCap 
****************************************************************************//**
*
* Function to update the EPR sink PDOs at runtime thereby overriding the generated
* configuration by EZ-PD Configurator.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param count
* Number of PDOs
*
* \param pdo
* Pointer to the PDO array
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateEprSnkCap (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t count,
        cy_pd_pd_do_t* pdo);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateEprSnkCapMask 
****************************************************************************//**
*
* Function to update the EPR sink PDO mask at runtime thereby overriding the 
* generated configuration by EZ-PD Configurator.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param mask
* PDO Mask
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateEprSnkCapMask (
        cy_stc_pdstack_context_t *ptrPdStackContext,
        uint8_t mask);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_GetAutoVcsEnabled 
****************************************************************************//**
*
* Function to check whether Automatic VConn Swap is enabled.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* True if Automatic VConn Swap by the Stack is enabled.
*
*******************************************************************************/
bool Cy_PdStack_Dpm_GetAutoVcsEnabled(cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateAutoVcsEnable 
****************************************************************************//**
*
* Function to enable/disable Automatic VConn Swap by the PD policy engine.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param val 
* Whether to enable Automatic VConn Swap.
* 
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateAutoVcsEnable(cy_stc_pdstack_context_t *ptrPdStackContext, bool val);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_UpdateVconnRetain
****************************************************************************//**
*
* Function to enable/disable VConn Retain setting.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param val 
* Whether to enable VConn Retain setting.
* 
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invalid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_UpdateVconnRetain(cy_stc_pdstack_context_t *ptrPdStackContext, uint8_t val);

/** \} group_pdstack_functions */

#endif /* CY_PDSTACK_DPM_H */

/* [] END OF FILE */
