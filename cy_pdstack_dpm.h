/***************************************************************************//**
* \file cy_pdstack_dpm.h
* \version 1.0
*
* Header file of Device Policy Manager of the PDStack middleware.
*
********************************************************************************
* \copyright
* Copyright 2021, Cypress Semiconductor Corporation. All rights reserved.
* You may use this file only in accordance with the license, terms, conditions,
* disclaimers, and limitations in the end user license agreement accompanying
* the software package with which this file was provided.
*******************************************************************************/

#if !defined(CY_PDSTACK_DPM_H)
#define CY_PDSTACK_DPM_H

#include "cy_pdstack_common.h"

/*******************************************************************************
*                              Type Definitions
*******************************************************************************/

/**
* \addtogroup group_pdstack_functions
* \{
*/

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Init
****************************************************************************//**
*
* This function initializes the device policy manager with callback pointers
* and loads the port configuration information from the port config table. This
* function also initializes the PD policy engine and Type-C connection manager.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrUsbPdContext
* UsbPd Driver Context pointer.
*
* \param ptrPortCfg
* Port Configuration pointer.
*
* \param ptrAppCbk
* Application callback function pointer.
*
* \param ptrDpmParams
* Pointer to the DPM parameter information structure.
*
* \param ptrTimerContext
* Pointer to soft timer context structure.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer is invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Init(
       /* Pointer to the pdstack context. Will be initialized as part of this function. */
       cy_stc_pdstack_context_t *ptrPdStackContext,
       /* This is required since the pdstack middleware will be making calls to the usbpd pdl. */
       cy_stc_usbpd_context_t *ptrUsbPdContext,
       /* Pointer to the port config structure - generated by the ez-pd configurator. */
       const cy_stc_pdstack_port_cfg_t *ptrPortCfg,
       /* Pointer to the application callbacks. */
       cy_stc_pdstack_app_cbk_t* ptrAppCbk,
       /* Pointer to the DPM Params. */
       const cy_stc_pdstack_dpm_params_t *ptrDpmParams,
       /* Pointer to soft timer context. */
       cy_stc_sw_timer_t *ptrTimerContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Start
****************************************************************************//**
*
* This function makes the specified USB Type-C port operational. The port to be
* updated is specified by passing the PD Stack context corresponding to it.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer is invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Start(
       cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Stop
****************************************************************************//**
*
* This function stops the port operation. The USBPD block corresponding to the
* port will be disabled.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer is invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Stop(
       cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Disable
****************************************************************************//**
*
* This function disables the PD port operation and limits it to receiving hard
* reset signalling.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer is invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Disable(
       cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_PrepareDeepSleep
****************************************************************************//**
*
* This function configures the PD policy manager and Type-C manager state machines
* to allow the PMG1 device to be placed in deep sleep. If the state machines are
* not in a busy state, the USBPD block is configured to trigger a wake-up interrupt
* on any activity and the location pointed by ptrDeepSleep is set to true.
* If the state machines are busy, the location pointed by ptrDeepSleep is set to
* false to indicate that the PMG1 device shall not proceed into deep sleep.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrDeepSleep
* Output parameter contains true if deepsleep is possible and configured,
* otherwise false
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer or the ptrDeepSleep is
* invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_PrepareDeepSleep(
       cy_stc_pdstack_context_t *ptrPdStackContext,
       bool *ptrDeepSleep);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Resume
****************************************************************************//**
*
* This function resumes the Type-C manager and PD policy engine state machines
* after the PMG1 device has woken up from deep sleep. This function needs to be
* called to resume the stack operation if Cy_PdStack_Dpm_PrepareDeepSleep has
* previously been called and returned true. This needs to be done even if the PMG1
* device did not actually go into deep sleep due to other reasons.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrResume
* Output parameter contains true if successful otherwise false
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer or the ptrResume is
* invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Resume(
       cy_stc_pdstack_context_t *ptrPdStackContext,
       bool *ptrResume);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_IsSleepAllowed
****************************************************************************//**
*
* This function checks if the PD policy engine and Type-C manager state machines
* corresponding to the specified Type-C port are idle. If this function indicates
* that the state machines are busy, deep sleep entry using the
* Cy_PdStack_Dpm_PrepareDeepSleep should not be attempted.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrSleepAllowed
* Output parameter contains true if possible to go into sleep mode, otherwise
* false
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer or the ptrSleepAllowed is
* invalid
* CY_PDSTACK_STAT_FAILURE if the operation fails.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_IsSleepAllowed(
       cy_stc_pdstack_context_t *ptrPdStackContext,
       bool *ptrSleepAllowed);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Task
****************************************************************************//**
*
* This function runs the Type-C manager and PD policy manager tasks for the
* specified port.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context pointer is invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Task(
       cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SendPdCommand
****************************************************************************//**
*
* This function provides an interface for the application module to send PD commands.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param cmd
* Type of command to be initiated.
*
* \param ptrCmdBuf
* Pointer to the command buffer.
*
* \param isResp
* Set to true when the API is called to send a response to previously received PD messages.
*
* \param cmdCbk
* Pointer to the callback function.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if the command is registered
* CY_PDSTACK_STAT_CMD_FAILURE if the PD port is not ready for a command
* CY_PDSTACK_STAT_BUSY if there is another pending command.
* CY_PDSTACK_STAT_BAD_PARAM if any of the parameters are invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SendPdCommand(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_en_pdstack_dpm_pd_cmd_t cmd,
        cy_stc_pdstack_dpm_pd_cmd_buf_t* ptrCmdBuf,
        bool isResp,
        cy_pdstack_dpm_pd_cmd_cbk_t cmdCbk);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_SendTypecCommand
****************************************************************************//**
*
* This function provides an interface for the application module to send commands
* to the Type-C connection manager.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param cmd
* Type of command to be performed.
*
* \param cmdCbk
* Pointer to the callback function.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if the command is registered
* CY_PDSTACK_STAT_CMD_FAILURE if the PD port is not ready for a command
* CY_PDSTACK_STAT_BUSY if there is another pending command.
* CY_PDSTACK_STAT_BAD_PARAM if any of the parameters are invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_SendTypecCommand(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_en_pdstack_dpm_typec_cmd_t cmd,
        cy_pdstack_dpm_typec_cmd_cbk_t cmdCbk);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ProtReset
****************************************************************************//**
*
* This function resets PD protocol layer (transmit and receive) message ID counters
* for the specified PD packet type. The message ID will be set to zero on the next
* PD message transmitted by PMG1. Message ID checks will not be performed for the
* next PD message of this type which is received by PMG1.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param sop
* Packet type (SOP, SOP' or SOP'')
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context parameter is invalid
* CY_PDSTACK_STAT_FAILURE if operation fails
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ProtReset(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_en_pd_sop_t sop);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_ProtResetRx
****************************************************************************//**
*
* This function resets the PD receive message counter for the specified packet type.
* This will cause the stack to skip checking for valid message ID on the next PD
* message of this type which is received.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param sop
* Packet type (SOP, SOP' or SOP'')
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context parameter is invalid
* CY_PDSTACK_STAT_FAILURE if operation fails
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_ProtResetRx(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        cy_en_pd_sop_t sop);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_PeStop
****************************************************************************//**
*
* This function stops the policy engine. Used in a fault scenario where-in the USBPD
* communication needs to be stopped, but the Type-C manager needs to be active in
* order to detect detach of the faulty device.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful
* CY_PDSTACK_STAT_BAD_PARAM if the context parameter is invalid
* CY_PDSTACK_STAT_FAILURE if operation fails
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_PeStop(
        cy_stc_pdstack_context_t *ptrPdStackContext);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_Pd3SrcRpFlowControl
****************************************************************************//**
*
* This function is used to specify whether we should keep the Rp termination at
* SinkTxNG or SinkTxOK while acting as a PD 3.0 source. The PD policy engine
* has a default source implementation where it changes the Rp to SinkTxNG before
* sending any PD messages and reverts the Rp to SinkTxOK at the end of the AMS.
* This function can be used to speed up operation when initiating back-to-back
* AMS-es by preventing the Rp from being changed back to SinkTxOK after each
* AMS.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param blockSinkAms
* If true, Rp will be changed to SinkTxNG; if false, Rp will be changed to SinkTxOK.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if DUT is a PD 3.0 source
* CY_PDSTACK_STAT_CMD_FAILURE if DUT is not a PD 3.0 source.
* CY_PDSTACK_STAT_BAD_PARAM if the context parameter is invalid
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_Pd3SrcRpFlowControl(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool blockSinkAms);

/*******************************************************************************
* Function Name: Cy_PdStack_Dpm_IsIdle
****************************************************************************//**
*
* Function to check whether the Type-C/PD stack is idle.
*
* \param ptrPdStackContext
* PdStack Library Context pointer.
*
* \param ptrIsIdle
* Output parameter contains true if idle, false if any operations are pending
* on any port.
*
* \return
* CY_PDSTACK_STAT_SUCCESS if operation is successful,
* CY_PDSTACK_STAT_BAD_PARAM if the parameters are invaid.
*
*******************************************************************************/
cy_en_pdstack_status_t Cy_PdStack_Dpm_IsIdle(
        cy_stc_pdstack_context_t *ptrPdStackContext,
        bool *ptrIsIdle);

/** \} group_pdstack_functions */

#endif /* CY_PDSTACK_DPM_H */

/* [] END OF FILE */
